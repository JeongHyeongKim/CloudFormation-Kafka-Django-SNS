{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters" : {
        "Key": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
            },

        "VPCCIDR" : {
            "Description" : "Insert your VPC CIDR for Kafka-sample. Default is 200.0.0.0/16",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.0.0/16",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "ProducerSubnetCIDR" : {
            "Description" : "Insert your Public Producer Subnet CIDR for Kafka-Sample. Defalut is 200.0.0.0/24",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.0.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."

        },

        "BrokerSubnetCIDR" : {
            "Description" : "Insert your Public Broker Subnet CIDR for Kafka-Sample. Defalut is 200.0.10.0/24",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.10.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."

        },
        
        "NamePrefix" : {
            "Description" : "Insert your Amazon Resource Name prefix. Default is kafka-sample.",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "20",
            "Default": "kafka-sample",
            "ConstraintDescription": "Exceed MaxLength 10"
        }
  },


  "Resources":{
            "vpc" : {
                "Type" : "AWS::EC2::VPC",
                "Properties" : {
                    "CidrBlock" : {"Ref" :"VPCCIDR"},
                    "EnableDnsHostnames" : "true",
                    "EnableDnsSupport" : "true",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"VPC"] ]}  } ]
                }
            },

            "producerSubnet" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                    "VpcId" : { "Ref" : "vpc" },
                    "CidrBlock" : {"Ref" :"ProducerSubnetCIDR"},
                    "AvailabilityZone" : "ap-northeast-2a",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-2a-1"] ]}}]
                }
            },

            "brokerSubnet" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                    "VpcId" : { "Ref" : "vpc" },
                    "CidrBlock" : {"Ref" :"BrokerSubnetCIDR"},
                    "AvailabilityZone" : "ap-northeast-2a",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-2a-1"] ]}}]
                }
            },

            "igw":{
                "Type" : "AWS::EC2::InternetGateway",
                "Properties" : {
                    "Tags" :  [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"igw"] ]}}]
                }
            },

            "igwAttach":{
                "Type" : "AWS::EC2::VPCGatewayAttachment",
                "Properties" : {
                    "InternetGatewayId" : {"Ref" : "igw"},
                    "VpcId" : {"Ref" : "vpc"}
                }
            },
            "publicRoute" : {
                "Type" : "AWS::EC2::Route",
                "DependsOn" : "igwAttach",
                "Properties" : {
                  "RouteTableId" : { "Ref" : "RouteTable" },
                  "DestinationCidrBlock" : "0.0.0.0/0",
                  "GatewayId" : { "Ref" : "igw" }
                }
            },
            "naclkafka":{
                "Type" : "AWS::EC2::NetworkAcl",
                "Properties" : {
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"nacl"] ]}}],
                    "VpcId" : {"Ref" : "vpc"}
                    }
            },

            "naclentry":{
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "naclkafka"},
                    "RuleNumber" : "100",
                    "Protocol" : "-1",
                    "RuleAction" : "allow",
                    "Egress" : "false",
                    "CidrBlock" : "0.0.0.0/0"
                }
            },
            "BrokerNaclAssoc" : {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "naclkafka"},
                    "SubnetId" : {"Ref" : "brokerSubnet"}
                    }
            },
            
            "ProducerNaclAssoc" : {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "naclkafka"},
                    "SubnetId" : {"Ref" : "producerSubnet"}
                    }
            },

            "RouteTable":{
                "Type" : "AWS::EC2::RouteTable",
                "Properties" : {
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"publicRT"] ]}}],
                    "VpcId" : {"Ref" : "vpc"}
                    }
            },

            "RouteTableAssoc" : {
                "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "RouteTableId" : {"Ref" : "RouteTable"},
                    "SubnetId" : {"Ref" : "brokerSubnet"}
                    }
            },
            "RouteTableAssoc1" : {
                "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "RouteTableId" : {"Ref" : "RouteTable"},
                    "SubnetId" : {"Ref" : "producerSubnet"}
                    }
            },

            "brokerSG" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupName" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-broker-sg"]]},
                  "VpcId" : { "Ref" : "vpc" },
                  "GroupDescription" : "for ssh, kafka protocol",
                  "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "CidrIp" : "0.0.0.0/0"}
                  ],
                  "Tags" : [{"Key" : "Name", "Value": {"Fn::Join":["-",[{"Ref":"NamePrefix"},"bastion-sg"]]} } ]
                }
              },

              "producerSG" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupName" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-producer-sg"]]},
                  "VpcId" : { "Ref" : "vpc" },
                  "GroupDescription" : "for ssh, kafka protocol, http",
                  "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "CidrIp" : "0.0.0.0/0"}
                  ],
                  "Tags" : [{"Key" : "Name", "Value": {"Fn::Join":["-",[{"Ref":"NamePrefix"},"bastion-sg"]]} } ]
                }
              },

              "BrokerInstance" : {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                    "ImageId" : "ami-0f38207c38ddaf2a0",
                    "InstanceType" : "t2.medium",
                    "KeyName" : {"Ref" : "Key"},
                    "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"broker"] ]}  }  ],
                    "NetworkInterfaces": [ {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "brokerSG" }],
                        "SubnetId": { "Ref" : "brokerSubnet" }
                      } ],
                    "UserData" : {"Fn::Base64" : { "Fn::Join" : ["",[
                        "#!/bin/bash","\n",
                        "\n","yum install -y java",
                        "\n","wget http://apache.mirror.cdnetworks.com/kafka/2.3.1/kafka_2.11-2.3.1.tgz",
                        "\n","tar -xzf kafka_2.11-2.3.1.tgz",
                        "\n", "cd kafka_2.11-2.3.1/bin",
                        "\n", "perl -p -i -e '$.==2 and print \"advertised.listener=PLAINTEXT://"
                        ]]}
                    }
                  }
              },
              "ProducerInstance" : {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                    "ImageId" : "ami-0d7a440e457436ce8",
                    "InstanceType" : "t2.micro",
                    "KeyName" : {"Ref" : "Key"},
                    "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"producer"]]}}],
                    "NetworkInterfaces" : [{
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "producerSG" }],
                        "SubnetId": { "Ref" : "producerSubnet" }
                      } ],
                    "UserData" : {"Fn::Base64" : { "Fn::Join" : ["",[
                        "#!/bin/bash","\n",
                        "\n","perl -p -i -e '$.==20 and print \"kafkaServerIP=",
                        {"Fn::GetAtt" : ["BrokerInstance", "PublicIp"]}, "\"\"' /home/ec2-user/mysite/simpletrigger/views.py"
                        ]]}
                    }
                  }
              },
              "S3Topic" : {
                "Type" : "AWS::SNS::Topic",
                "Properties" : {
                    "TopicName" : "S3ToSNS"
                  }
              },
              "topicPolicy" : {
                "Type" : "AWS::SNS::TopicPolicy",
                "Properties" : {
                    "PolicyDocument" : {
                        "Version": "2008-10-17",
                        "Id": "example-ID",
                        "Statement": [
                          { 
                            "Sid": "kafka-sample",
                            "Effect": "Allow",
                            "Principal": {
                              "Service": "s3.amazonaws.com"
                            },
                            "Action": "sns:Publish",
                            "Resource": {"Ref" : "S3Topic"},
                            "Condition": {
                              "ArnLike": {
                                "aws:SourceArn": {"Fn::Join": [ "", [ "arn:aws:s3:::", {"Fn::Join" :["-",[{"Ref" : "NamePrefix"},"bucket"]] }]]}
                              }
                            }
                          }
                        ]
                      },
                "Topics" : [ {"Ref" : "S3Topic"} ]
                }
            },
            "S3Bucket" : {
              "Type" : "AWS::S3::Bucket",
              "DependsOn": ["topicPolicy"],
              "Properties" : {

                  "BucketName" : {"Fn::Join" :["-",[{"Ref" : "NamePrefix"},"bucket"]] },
                  "NotificationConfiguration" : {
                    "TopicConfigurations" : [
                      {
                        "Event": "s3:ObjectCreated:Put",
                        "Topic": {
                          "Ref": "S3Topic"
                        }
                      }
                    ]
                  }
                }
            }
        }
    }