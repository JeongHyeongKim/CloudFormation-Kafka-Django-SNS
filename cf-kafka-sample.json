{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters" : {
        "Key": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
            },

        "VPC-CIDR" : {
            "Description" : "Insert your VPC CIDR for Kafka-sample. Default is 200.0.0.0/16",
            "Type": "string",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.0.0/16",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "ProducerSubnet-CIDR" : {
            "Description" : "Insert your Public Producer Subnet CIDR for Kafka-Sample. Defalut is 200.0.0.0/24",
            "Type" : "string",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.0.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."

        },

        "BrokerSubnet-CIDR" : {
            "Description" : "Insert your Public Broker Subnet CIDR for Kafka-Sample. Defalut is 200.0.10.0/24",
            "Type" : "string",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "200.0.10.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."

        },
        
        "NamePrefix" : {
            "Description" : "Insert your Amazon Resource Name prefix. Default is Kafka-sample.",
            "Type": "string",
            "MinLength": "1",
            "MaxLength": "10",
            "Default": "Kafka-sample",
            "ConstraintDescription": "Exceed MaxLength 10"
        }
  },


  "Resources":{
            "vpc" : {
                "Type" : "AWS::EC2::VPC",
                "Properties" : {
                    "CidrBlock" : {"Ref" :"VPC-CIDR"},
                    "EnableDnsHostnames" : "true",
                    "EnableDnsSupport" : "true",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"VPC"] ]}  } ]
                }
            },

            "producerSubnet" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                    "VpcId" : { "Ref" : "vpc" },
                    "CidrBlock" : {"Ref" :"ProducerSubnet-CIDR"},
                    "AvailabilityZone" : "ap-northeast-2a",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-2a-1"] ]}}]
                }
            },

            "brokerSubnet" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                    "VpcId" : { "Ref" : "vpc" },
                    "CidrBlock" : {"Ref" :"BrokerSubnet-CIDR"},
                    "AvailabilityZone" : "ap-northeast-2a",
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-2a-1"] ]}}]
                }
            },

            "igw":{
                "Type" : "AWS::EC2::InternetGateway",
                "Properties" : {
                    "Tags" :  [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"igw"] ]}}]
                }
            },

            "igwAttach":{
                "Type" : "AWS::EC2::VPCGatewayAttachment",
                "Properties" : {
                    "InternetGatewayId" : {"Ref" : "igw"},
                    "VpcId" : {"Ref" : "vpc"}
                }
            },

            "nacl":{
                "Type" : "AWS::EC2::NetworkAcl",
                "Properties" : {
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"nacl"] ]}}],
                    "VpcId" : {"Ref" : "vpc"}
                    }
            },

            "naclentry":{
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "nacl"},
                    "RuleNumber" : "100",
                    "Protocol" : "-1",
                    "RuleAction" : "allow",
                    "Egress" : "true",
                    "CidrBlock" : "0.0.0.0/0"
                }
            },

            "BrokerNaclAssoc" : {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "naclentry"},
                    "SubnetId" : {"Ref" : "brokerSubnet"}
                    }
            },
            
            "ProducerNaclAssoc" : {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "naclentry"},
                    "SubnetId" : {"Ref" : "producerSubnet"}
                    }
            },

            "RouteTable":{
                "Type" : "AWS::EC2::RouteTable",
                "Properties" : {
                    "Tags" : [ {"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"publicRT"] ]}}],
                    "VpcId" : {"Ref" : "vpc"}
                    }
            },

            "RouteTableAssoc" : {
                "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "RouteTableId" : {"Ref" : "RouteTable"},
                    "SubnetId" : {"Ref" : "publicsubnet"}
                    }
            },

            "brokerSG" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupName" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-broker-sg"]]},
                  "VpcId" : { "Ref" : "vpc" },
                  "GroupDescription" : "for ssh, kafka protocol",
                  "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "CidrIp" : "0.0.0.0/0"}
                  ],
                  "Tags" : [{"Key" : "Name", "Value": {"Fn::Join":["-",[{"Ref":"resourceNaming"},"bastion-sg"]]} } ]
                }
              },

              "producerSG" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupName" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"public-producer-sg"]]},
                  "VpcId" : { "Ref" : "vpc" },
                  "GroupDescription" : "for ssh, kafka protocol, http",
                  "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "CidrIp" : "0.0.0.0/0"}
                  ],
                  "Tags" : [{"Key" : "Name", "Value": {"Fn::Join":["-",[{"Ref":"resourceNaming"},"bastion-sg"]]} } ]
                }
              },

              "SNSTopic" : {
                "Type" : "AWS::SNS::Topic",
                "Properties" : {
                    "TopicName" : {"Ref" : "NamePrefix"}
                  }
              },

              "S3forSNS" : {
                "Type" : "AWS::S3::Bucket",
                "Properties" : {
                    "BucketName" : {"Fn::Join" :["-",[{"Ref":"NamePrefix"},"bucket"]] },
                    "NotificationConfiguration" : { "TopicConfigurations" : [ {
                        "Event" : "s3:ObjectCreated:Put",
                        "Topic" : {"Ref" : "SNSTopic"}
                      } ]}
                  }
              },

              "BrokerInstance" : {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                    "AdditionalInfo" : String,
                    "AvailabilityZone" : String,
                    "HostId" : String,
                    "IamInstanceProfile" : String,
                    "ImageId" : "ami-0f38207c38ddaf2a0",
                    "InstanceType" : "t2.medium",
                    "KeyName" : {"Ref" : "Key"},
                    "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["-",[{"Ref":"NamePrefix"},"broker"] ]}  }  ],
                    "UserData" : String,
                    "NetworkInterfaces": [ {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [{ "Ref" : "brokerSG" }],
                        "SubnetId": { "Ref" : "brokerSubnet" }
                      } ]
                  }
              },

              "ProducerInstance" : {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                    "AdditionalInfo" : String,
                    "Affinity" : String,
                    "AvailabilityZone" : String,
                    "BlockDeviceMappings" : [ BlockDeviceMapping, ... ],
                    "CreditSpecification" : CreditSpecification,
                    "DisableApiTermination" : Boolean,
                    "EbsOptimized" : Boolean,
                    "ElasticGpuSpecifications" : [ ElasticGpuSpecification, ... ],
                    "ElasticInferenceAccelerators" : [ ElasticInferenceAccelerator, ... ],
                    "HostId" : String,
                    "IamInstanceProfile" : String,
                    "ImageId" : String,
                    "InstanceInitiatedShutdownBehavior" : String,
                    "InstanceType" : String,
                    "Ipv6AddressCount" : Integer,
                    "Ipv6Addresses" : [ InstanceIpv6Address, ... ],
                    "KernelId" : String,
                    "KeyName" : String,
                    "LaunchTemplate" : LaunchTemplateSpecification,
                    "LicenseSpecifications" : [ LicenseSpecification, ... ],
                    "Monitoring" : Boolean,
                    "NetworkInterfaces" : [ NetworkInterface, ... ],
                    "PlacementGroupName" : String,
                    "PrivateIpAddress" : String,
                    "RamdiskId" : String,
                    "SecurityGroupIds" : [ String, ... ],
                    "SecurityGroups" : [ String, ... ],
                    "SourceDestCheck" : Boolean,
                    "SsmAssociations" : [ SsmAssociation, ... ],
                    "SubnetId" : String,
                    "Tags" : [ Tag, ... ],
                    "Tenancy" : String,
                    "UserData" : String,
                    "Volumes" : [ Volume, ... ]
                  }
              }

              












  }




}